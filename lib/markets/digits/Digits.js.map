{"version":3,"sources":["../../../components/markets/digits/Digits.jsx"],"names":["React","PropTypes","TextLabel","classnames","Digits","props","className","value","type","fixed_decimals","change_color","unit","plus_sign","wrapper","color","font","factor","tag","number_value","Number","is_nan","isNaN","is_invalid","Math","abs","number_string","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","getSIUnit","start","end","replace","composed_className","styles","Color","Font","propTypes","string","oneOfType","number","bool","object","defaultProps","REGULAR"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextLabel from 'components/textlabel';\nimport classnames from 'classnames';\n\nimport styles from './Digits.scss';\n\nfunction Digits(props) {\n\n\tconst {\n\t\tclassName,\n\t\tvalue,\n\t\ttype,\n\t\tfixed_decimals,\n\t\tchange_color,\n\t\tunit,\n\t\tplus_sign,\n\t\twrapper,\n\t\tcolor,\n\t\tfont,\n\t\tfactor,\n\t\ttag,\n\t} = props;\n\n\tlet number_value = Number(value);\n\tconst is_nan = isNaN(value) || value === null;\n\n\t// WIP: IS BE A BETTER PLACE TO HANDLE NUMBER VALIDATION\n\tconst is_invalid = Math.abs(number_value) === 99999.99000;\n\n\t// Format number as a factor of [factor] value\n\tif (factor) {\n\t\tnumber_value /= factor;\n\t}\n\n\t// Number string formatting\n\tlet number_string = number_value;\n\t// Format number based on decimals and locale\n\tnumber_string = number_value.toLocaleString(undefined, {\n\t\tminimumFractionDigits: fixed_decimals, \n\t\tmaximumFractionDigits: fixed_decimals,\n\t});\n\t// Add plus sign\n\tif (plus_sign && number_value > 0) {\n\t\tnumber_string = '+'+number_string;\n\t}\n\t// Append unit\n\tif (unit) {\n\t\tnumber_string = `${number_string}${unit}`;\n\t}\n\t// Append factor\n\tif (factor) {\n\t\tnumber_string = `${number_string}${getSIUnit(factor)}`;\n\t}\n\n\t// Handle NaN and invalid values\n\tnumber_string = (is_nan || is_invalid) ? '--' : number_string;\n\n\t// Prepend/Append wrappers\n\tnumber_string = wrapper ? `${wrapper.start}${number_string}${wrapper.end}` : number_string;\n\n\t// Format based on type\n\tif (type === 'accounting') {\n\t\tnumber_string = number_value < 0 ? `(${number_string.replace('-', '')})` : number_string;\n\t}\n\n\tconst composed_className = classnames(\n\t\tstyles['digits'],\n\t\tstyles[change_color && value > 0.000000 && 'green'],\n\t\tstyles[change_color && value < 0.000000 && 'red'],\n\t\tclassName\n\t);\n\t\n\treturn (\n\t\t<TextLabel\n\t\t\tclassName={composed_className}\n\t\t\ttext={number_string}\n\t\t\tfont={font}\n\t\t\tcolor={color}\n\t\t\ttag={tag}\n\t\t/>\n\t);\n}\n\nconst getSIUnit = factor => {\n\tswitch (factor) {\n\t\tcase 100:\n\t\t\treturn 'h';\n\t\tcase 1000:\n\t\t\treturn 'K';\n\t\tcase 1000000:\n\t\t\treturn 'M';\n\t\tcase 1000000000:\n\t\t\treturn 'B';\n\t\tcase 1000000000000:\n\t\t\treturn 'T';\n\t\tdefault:\n\t\t\treturn '';\n\t}\n};\n\nDigits.Color = TextLabel.Color;\nDigits.Font = TextLabel.Font;\n\nDigits.propTypes = {\n\tclassName: PropTypes.string,\n\tvalue: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.number\n\t]),\n\ttype: PropTypes.string,\n\tfixed_decimals: PropTypes.number,\n\tchange_color: PropTypes.bool,\n\tplus_sign: PropTypes.bool,\n\tunit: PropTypes.string,\n\twrapper: PropTypes.object,\n\tcolor: PropTypes.string,\n\tfont: PropTypes.string,\n\tfactor: PropTypes.number,\n\ttag: PropTypes.string,\n};\n\nDigits.defaultProps = {\n\tfont: TextLabel.Font.REGULAR,\n\ttag: 'span',\n};\n\nexport default Digits;\n"],"file":"Digits.js"}